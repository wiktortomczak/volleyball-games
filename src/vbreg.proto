
syntax = "proto2";

import "base/timestamp.proto";
import "base/proto/empty_message.proto";

service Games {
  rpc StreamData(StreamDataRequest) returns (stream GamesData) {}

  rpc PlayerAddOrTouch(PlayerAddOrTouchRequest) returns (EmptyMessage) {}
  rpc PlayerUpdate(PlayerUpdateRequest) returns (EmptyMessage) {}
  // TODO: PlayerRemove
  rpc PlayerTransactionAdd(PlayerTransactionAddRequest)
    returns (EmptyMessage) {}
  // TODO: PlayerPaymentTransactionRemove.
  // TODO: PlayerPaymentTransactionUpdate.
  // TODO: Remove PlayerDeposit.
  rpc GameAdd(GameAddRequest) returns (EmptyMessage) {}  // TODO: role=admin.
  rpc GameUpdate(GameUpdateRequest)
    returns (EmptyMessage) {}  // TODO: role=admin.
  rpc GameCancel(GameCancelRequest)
    returns (EmptyMessage) {}  // TODO: role=admin.
  rpc GameSetPlayerSignedUp(GameSetPlayerSignedUpRequest)
    returns (EmptyMessage) {}
  rpc GameSetNotifyPlayerIfPlaceFree(GameSetNotifyPlayerIfPlaceFreeRequest)
    returns (EmptyMessage) {}
}

message StreamDataRequest {
  optional string facebook_id = 1;
}

message PlayerAddOrTouchRequest {
  optional string facebook_id = 1;
  optional string name = 2;
}

message PlayerUpdateRequest {
  optional PlayerRef player = 1;
  optional string email = 2;
  optional bool notify_if_new_game = 3;
  optional string iban = 4;
}

message PlayerTransactionAddRequest {
  optional PlayerRef player = 1;
  optional Transaction.Type type = 2;
  optional double amount_pln = 3;
  optional string source = 4;
  oneof details {
    // PAYMENT, BLOCKADE, RETURN.
    GameRef game = 5;
    // DEPOSIT: eg. wire id / title.
    string deposit_source = 6;
  }
}

message GameAddRequest {
  optional Timestamp start_time = 1;
  optional Timestamp end_time = 2;
  optional string location = 3;
  optional string facebook_event_url = 4;
  optional double price_pln = 5;
  optional int64 max_signed_up = 6;
}

message GameUpdateRequest {
  optional GameRef game = 1;
  optional Timestamp start_time = 2;
  optional Timestamp end_time = 3;
  optional string location = 4;
  optional string facebook_event_url = 5;
  optional double price_pln = 6;
  optional int64 max_signed_up = 7;
}

message GameCancelRequest {
  optional GameRef game = 1;
}

message GameSetPlayerSignedUpRequest {
  optional GameRef game = 1;
  optional PlayerRef player = 2;  // role=admin if other player.
  optional bool is_signed_up = 3;
  optional bool waive_cancelation_fee = 4;  // role=admin.
}

message GameSetNotifyPlayerIfPlaceFreeRequest {
  optional GameRef game = 1;
  optional PlayerRef player = 2;
  optional bool should_notify = 3;
}

message GamesData {
  repeated Player player = 1;
  repeated Game game = 2;
  map<string, int64> player_acronyms_last_seq_num = 3;
  optional int64 last_game_id = 4;
}

message Player {
  optional string facebook_id = 1;  // Primary key.
  optional string name = 2;
  optional string email = 3;
  optional Timestamp last_touch = 4;
  optional bool is_admin = 5;
  optional bool notify_if_new_game = 6;
  optional Payments payments = 7;
  optional string bank_transfer_id = 8;
  optional string iban = 9;
}

message PlayerRef {
  optional string facebook_id = 1;
}

message Game {
  optional int64 id = 1;  // Primary key.
  optional Timestamp start_time = 2;
  optional Timestamp end_time = 3;
  optional string location = 4;
  optional string facebook_event_url = 5;
  optional double price_pln = 6;
  enum State {
    UPCOMING = 1;
    ENDED = 2;
    CANCELED = 3;
  }
  optional State state = 7;
  optional int64 max_signed_up = 8;
  repeated PlayerRef signed_up = 9;
  repeated PlayerRef waiting = 10;
  repeated PlayerRef to_notify_if_place_free = 11;
  // optional double players_paid_pln = 12;
}

message GameRef {
  optional int64 id = 1;
}

message Payments {
  // total_deposited - total_paid
  optional double balance_pln = 1;
  // balance - total_blocked
  optional double free_balance_pln = 2;
  // sum(deposit) - sum(withdraw)
  optional double total_deposited_pln = 3;
  // sum(payment) - sum(return)
  optional double total_paid_pln = 4;
  // sum(block) - sum(unblock)
  optional double total_blocked_pln = 5;
  repeated Transaction transaction = 6;
}

message Transaction {
  enum Type {
    DEPOSIT = 1;
    PAY = 2;
    RETURN = 3;
    BLOCK = 4;
    UNBLOCK = 5;
    WITHDRAW = 6;
  }
  optional Timestamp timestamp = 1;
  optional Type type = 2;
  optional double amount_pln = 3;
  oneof details {
    // PAYMENT, BLOCKADE, RETURN.
    GameRef game = 4;
    // DEPOSIT: eg. wire id / title.
    string deposit_source = 5;
    // WITHDRAWAL.
    string withdrawal_iban = 6;
  }
}


message Configuration {
  optional string version = 1;
  optional string site_url = 2;
  repeated CancelationFeeRule cancelation_fee_rule = 3;
}

message CancelationFeeRule {
  optional int64 min_days = 1;
  optional int64 max_days = 2;
  optional double fraction = 3;
}

message CancelationFee {
  optional int64 min_days = 1;
  optional int64 max_days = 2;
  optional double fee_pln = 3;
}
