// Frontend <-> backend interface.
// Public data model and API (backend interface) definition.

syntax = "proto2";

import "base/timestamp.proto";
import "base/proto/empty_message.proto";

// API methods and request / response messages.

service Games {
  // Streams updates to Games service state.
  rpc StreamData(StreamDataRequest) returns (stream GamesData) {}

  // Adds a player if it does not exist or updates its last touch (login) time.
  rpc PlayerAddOrTouch(PlayerAddOrTouchRequest) returns (EmptyMessage) {}
  // Updates player data.
  rpc PlayerUpdate(PlayerUpdateRequest) returns (EmptyMessage) {}
  // TODO: PlayerRemove
  // Adds a transaction record to player's payments account.
  rpc PlayerTransactionAdd(PlayerTransactionAddRequest)
    returns (EmptyMessage) {}
  // TODO: PlayerPaymentTransactionRemove.
  // TODO: PlayerPaymentTransactionUpdate.
  // Adds a game.
  rpc GameAdd(GameAddRequest) returns (EmptyMessage) {}  // TODO: role=admin.
  // Updates game data.
  rpc GameUpdate(GameUpdateRequest)
    returns (EmptyMessage) {}  // TODO: role=admin.
  // Cancels the game (marks as canceled).
  rpc GameCancel(GameCancelRequest)
    returns (EmptyMessage) {}  // TODO: role=admin.
  // Sets (updates) the list of players signed up for the game.
  rpc GameSetPlayerSignedUp(GameSetPlayerSignedUpRequest)
    returns (EmptyMessage) {}
  // Sets (updates) the list of players to notify if the game has a free place.
  rpc GameSetNotifyPlayerIfPlaceFree(GameSetNotifyPlayerIfPlaceFreeRequest)
    returns (EmptyMessage) {}
}

message StreamDataRequest {
  optional string facebook_id = 1;
}

message PlayerAddOrTouchRequest {
  optional string facebook_id = 1;
  optional string name = 2;
}

message PlayerUpdateRequest {
  optional PlayerRef player = 1;
  optional string email = 2;
  optional bool notify_if_new_game = 3;
  optional string iban = 4;
}

message PlayerTransactionAddRequest {
  optional PlayerRef player = 1;
  optional Transaction.Type type = 2;
  optional double amount_pln = 3;
  optional string source = 4;
  oneof details {
    // PAYMENT, BLOCKADE, RETURN.
    GameRef game = 5;
    // DEPOSIT: eg. wire id / title.
    string deposit_source = 6;
  }
}

message GameAddRequest {
  optional Timestamp start_time = 1;
  optional Timestamp end_time = 2;
  optional string location = 3;
  optional string facebook_event_url = 4;
  optional double price_pln = 5;
  optional int64 max_signed_up = 6;
}

message GameUpdateRequest {
  optional GameRef game = 1;
  optional Timestamp start_time = 2;
  optional Timestamp end_time = 3;
  optional string location = 4;
  optional string facebook_event_url = 5;
  optional double price_pln = 6;
  optional int64 max_signed_up = 7;
}

message GameCancelRequest {
  optional GameRef game = 1;
}

message GameSetPlayerSignedUpRequest {
  optional GameRef game = 1;
  optional PlayerRef player = 2;  // role=admin if other player.
  optional bool is_signed_up = 3;
  optional bool waive_cancelation_fee = 4;  // role=admin.
}

message GameSetNotifyPlayerIfPlaceFreeRequest {
  optional GameRef game = 1;
  optional PlayerRef player = 2;
  optional bool should_notify = 3;
}

// Games service data (public data model).
// TODO: Move private data to a separate message definition.

message GamesData {
  // All players.
  repeated Player player = 1;
  // All games.
  repeated Game game = 2;
  // To derive bank_transfer_id of next player with given acronyms.
  map<string, int64> player_acronyms_last_seq_num = 3;
  // Id of last created game, to derive next game id from.
  optional int64 last_game_id = 4;
}

message Player {
  // Player id (primary key). It is their Facebook id, eg. '2413043365404025'.
  optional string facebook_id = 1;
  // Display name.
  optional string name = 2;
  // Email address.
  optional string email = 3;
  // Time of last touch (login).
  optional Timestamp last_touch = 4;
  // If the player has admin role.
  optional bool is_admin = 5;
  // If the player should automatically be added to
  // Game.to_notify_if_game_free of each new Game.
  optional bool notify_if_new_game = 6;
  // Payments account data.
  optional Payments payments = 7;
  // An id unique across all players, for identifying which player
  // a received bank transfer refers to.
  optional string bank_transfer_id = 8;
  // IBAN bank account number, 26 digits.
  optional string iban = 9;
}

// Reference to a Player message. Foreign key.
message PlayerRef {
  optional string facebook_id = 1;
}

message Game {
  // Game id (primary key). Arbitrary unique number.
  optional int64 id = 1;
  // Game start time.
  optional Timestamp start_time = 2;
  // Game end time.
  optional Timestamp end_time = 3;
  // Where the game is taking place, human-readable.
  optional string location = 4;
  // Corresponding facebook event.
  optional string facebook_event_url = 5;
  // Price per player.
  optional double price_pln = 6;
  enum State {
    UPCOMING = 1;
    ENDED = 2;
    CANCELED = 3;
  }
  optional State state = 7;
  // Number of places (players).
  optional int64 max_signed_up = 8;
  // Players signed up for the game.
  repeated PlayerRef signed_up = 9;
  // Players on the waiting list, should a place become free.
  repeated PlayerRef waiting = 10;
  // Players to be notified should a place become free.
  repeated PlayerRef to_notify_if_place_free = 11;
  // optional double players_paid_pln = 12;
}

// Reference to a Game message. Foreign key.
message GameRef {
  optional int64 id = 1;
}

// Player's payments. Aggregate sums and complete transaction record.
message Payments {
  // total_deposited - total_paid
  optional double balance_pln = 1;
  // balance - total_blocked
  optional double free_balance_pln = 2;
  // sum(deposit) - sum(withdraw)
  optional double total_deposited_pln = 3;
  // sum(payment) - sum(return)
  optional double total_paid_pln = 4;
  // sum(block) - sum(unblock)
  optional double total_blocked_pln = 5;
  repeated Transaction transaction = 6;
}

// An operation in a payments account.
message Transaction {
  enum Type {
    DEPOSIT = 1;
    PAY = 2;
    RETURN = 3;
    BLOCK = 4;
    UNBLOCK = 5;
    WITHDRAW = 6;
  }
  optional Timestamp timestamp = 1;
  optional Type type = 2;
  optional double amount_pln = 3;
  oneof details {
    // PAYMENT, BLOCKADE, RETURN.
    GameRef game = 4;
    // DEPOSIT: eg. wire id / title.
    string deposit_source = 5;
    // WITHDRAWAL.
    string withdrawal_iban = 6;
  }
}

// System-wide configuration, shared between frontend and backend.
message Configuration {
  optional string version = 1;
  optional string site_url = 2;
  repeated CancelationFeeRule cancelation_fee_rule = 3;
}

message CancelationFeeRule {
  optional int64 min_days = 1;
  optional int64 max_days = 2;
  optional double fraction = 3;
}

// TODO: Move to frontend / remove.
message CancelationFee {
  optional int64 min_days = 1;
  optional int64 max_days = 2;
  optional double fee_pln = 3;
}
